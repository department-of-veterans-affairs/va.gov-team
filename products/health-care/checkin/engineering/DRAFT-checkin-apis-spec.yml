openapi: "3.0.0"
info:
  title: "DRAFT Check In APIs"
  description: |
    While this document is in a draft state, it is intended to facilitate communication between teams.

    This collection of endpoints make up the VSIP APIs fronted by the VSIP API Gateway.

    ***PLEASE NOTE***: These APIs are currently in the `discovery` phase, meaning
    it is highly likely that they will change significantly before the beta version
    is released.

    Please refer to the [roadmap (forthcoming)]() know when to expect a more stable
    version of these endpoints.
  version: "1.0.0"
servers:
  - url: http://localhost:3000
paths:
  # Questions:
  ## 1. Does the API need to provide a way to manage the queue (at first)? E.g. Does a nurse need a way to re-order the list of patients waiting on the 'nurse' phase?
  ##    Or can they just do things "out of order"? E.g. 3 patients, A B C, ordered and waiting on nurse. A & B are not ready, so nurse needs to call C. Can the nurse
  ##    just call C and move them on to the next phase? Or does the nurse need to take the extra step of re-ordering (C = 1, A = 2, B = 3) the patients, and then calling them?
  ## 2. Is there a 1-1 mapping between Clinic and workflow? Can a clinic have more than 1 workflow?
  /i-am-here:
    get:
      tags:
        - "vetext"
      summary: "Gets a list of veterans who are ready to come in"
      description: ""
      operationId: "imh"
      responses:
        "200":
          description: "OK"
        "404":
          description: "Not Found"
  /come-in:
    post:
      tags:
        - "vetext"
      summary: "Notify the patient that they can enter the building"
      description: ""
      operationId: "comeIn"
      responses:
        "200":
          description: "OK"
        "404":
          description: "Not Found"
  /pre-checkins:
    get:
      tags:
        - "precheckin"
      summary: "Gets a list of pre-checkin items"
      description: ""
      operationId: "precheckin"
      parameters:
        - in: query
          name: is-complete
          schema:
            type: boolean
      responses:
        "200":
          description: "OK"
        "404":
          description: "Not Found"
  /workflows/{id}:
    get:
      tags:
        - "workflows"
      summary: "Gets a workflow"
      description: "Returns a workflow with states"
      operationId: "get-workflow"
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: string
        - in: query
          required: false
          name: status
          schema:
            type: string
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                properties:
                  id:
                    type: number
                  name:
                    type: string
                  states:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string

        "404":
          description: "Not Found"
    post:
      tags:
        - "workflows"
      summary: "Creates a workflow"
      description: ""
      operationId: "post-workflow"
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                states:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string

      responses:
        "200":
          description: "OK"
        "404":
          description: "Not Found"
  /workflows/{workflowId}/patients:
    get:
      tags:
        - "workflows"
      summary: "Gets patients in a workflow"
      description: "Returns a list of patients in a workflow"
      operationId: "getWorkflowPatients"
      parameters:
        - in: path
          required: true
          name: workflowId
          schema:
            type: string
        # Will likely need some query params to filter here
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                properties:
                  patients:
                    type: array
                    items:
                      properties:
                        id:
                          type: number
                        name:
                          type: string
                        workflowState:
                          type: string
        "404":
          description: "Not Found"
    post:
      tags:
        - "workflows"
      summary: "Adds a patient to a workflow"
      description: ""
      operationId: "addPatient"
      parameters:
        - in: path
          required: true
          name: workflowId
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                patientId:
                  type: string
      responses:
        "200":
          description: "OK"
        "404":
          description: "Not Found"

  # need a way for someone to find a workflow to setup for kiosk/workstation
  # if we use a clinics route here, it's easy (organizationally) to CRUD workflows for clinics
  /clinics/{sta3n}/workflows:
    get:
      tags:
        - "clinics"
      summary: "Gets list of clinic workflows for station/division"
      description: "shows all patient in workflow and their status"
      operationId: "getWorkflowsForStation"
      parameters:
        - in: path
          required: true
          name: sta3n
          schema:
            type: string
      responses:
        "200":
          description: "OK"
        "404":
          description: "Not Found"
  /clinics/{sta3n}/patients:
    get:
      tags:
        - "clinics"
      summary: "find patients"
      description: ""
      operationId: "patientQuery"
      parameters:
        - in: path
          required: true
          name: sta3n
          schema:
            type: string
        - in: path
          required: true
          name: patientId
          description: "patient ICN"
          schema:
            type: string
      responses:
        "200":
          description: "OK"
        "404":
          description: "Not Found"
  /workflows/{id}/actions/change-status:
    put:
      tags:
        - "workflows"
        - "actions"
      summary: "change status of patient in workflow"
      description: ""
      operationId: "setStatusForPatient"
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: string
      requestBody:
        description: "The status to move to and patient information"
        content:
          application/json:
            schema:
              properties:
                patientId:
                  type: string
                  example: "abc123"
                newStatus:
                  type: string
                  example: "withNurse"
      responses:
        "200":
          description: "OK"
        "404":
          description: "Not Found"
  /workflows/{id}/actions/clear:
    delete:
      tags:
        - "workflows"
        - "actions"
      summary: "clear all patients from workflow"
      description: ""
      operationId: "workflowClear"
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: string
      responses:
        "200":
          description: "OK"
        "404":
          description: "Not Found"
  # is this finding a patient in a workflow, or finding a patient in a clinic?
  # or both?
  /workflows/{workflowId}/patients/{patientId}:
    get:
      tags:
        - "workflows"
      summary: "find a patient in a workflow"
      description: ""
      operationId: getWorkflowPatient
      parameters:
        - in: path
          required: true
          name: workflowId
          schema:
            type: string
        - in: path
          required: true
          name: patientId
          description: "patient ICN"
          schema:
            type: string
      responses:
        "200":
          description: "OK"
        "404":
          description: "Not Found"
  # consider an "actions" route for grouping actions & easy audit logging
  /insurance:
    get:
      tags:
        - "insurance"
      summary: "Retrieve patient insurance information"
      description: ""
      operationId: "getPatientInsurance"
      responses:
        "200":
          description: "OK"
        "404":
          description: "Not Found"
    put:
      tags:
        - "insurance"
      summary: "Modify patient insurance information"
      description: ""
      operationId: "updatePatientInsurance"
      responses:
        "200":
          description: "OK"
        "404":
          description: "Not Found"
    post:
      tags:
        - "insurance"
      summary: "Add patient insurance information"
      description: ""
      operationId: "addPatientInsurance"
      responses:
        "200":
          description: "OK"
        "404":
          description: "Not Found"
  /demographics:
    get:
      tags:
        - "demographics"
      summary: "Retrieve patient demographics"
      description: ""
      operationId: "getPatientDemographics"
      parameters:
        - in: path
          required: true
          name: patient-id
          schema:
            type: string
      responses:
        "200":
          description: "OK"
        "404":
          description: "Not Found"
    # This was a POST in the ppt. Makes more sense to
    # use PUT or PATCH here, unless pat demos are created
    # on update for history tracking purposes
    put:
      tags:
        - "demographics"
      summary: "Update patient demographics"
      description: ""
      operationId: "updatePatientDemographics"
      parameters:
        - in: path
          required: true
          name: patient-id
          schema:
            type: string
      requestBody:
        description: "The demographic information to update"
        content:
          application/json:
            schema:
              properties:
                placeholder:
                  type: string
      responses:
        "200":
          description: "OK"
        "404":
          description: "Not Found"
  /medications:
    get:
      tags:
        - "medications"
      summary: "Retrieves patient medications"
      description: ""
      operationId: "getMedications"
      responses:
        "200":
          description: "OK"
        "404":
          description: "Not Found"
  /medications/{med-id}:
    post:
      tags:
        - "medications"
      summary: "Create a refill order"
      description: ""
      operationId: "??"
      parameters:
        - in: path
          required: true
          name: med-id
          schema:
            type: string
      requestBody:
        description: "The medication information"
        content:
          application/json:
            schema:
              properties:
                placeholder:
                  type: string
      responses:
        "200":
          description: "OK"
        "404":
          description: "Not Found"
  /appointments:
    get:
      tags:
        - "appointments"
      summary: "Retrieves a list of appointments"
      description: ""
      operationId: "getAppointments"
      responses:
        "200":
          description: "OK"
        "404":
          description: "Not Found"
  /appointments/{appt-id}:
    get:
      tags:
        - "appointments"
      summary: "Retrieves a single appointment"
      description: ""
      operationId: "getSingleAppt"
      parameters:
        - in: path
          required: true
          name: appt-id
          schema:
            type: string
      responses:
        "200":
          description: "OK"
        "404":
          description: "Not Found"
  /appointments/{appt-id}/checkin:
    post:
      tags:
        - "appointments"
      summary: "Check a patient in"
      description: ""
      operationId: "checkinPatient"
      parameters:
        - in: path
          required: true
          name: appt-id
          schema:
            type: string
      requestBody:
        description: "The appt check in information"
        content:
          application/json:
            schema:
              properties:
                placeholder:
                  type: string
      responses:
        "200":
          description: "OK"
        "404":
          description: "Not Found"
