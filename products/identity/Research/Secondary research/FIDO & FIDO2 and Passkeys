

Date: 11/29/2023

Joshua Matulonis - josh.matulonis@oddball.io


**Jump to:**

[Summary](#Summary)

[Introduction](#Introduction)

[Passkeys](#Passkeys)

[FIDO](#FIDO)

[Government Use of FIDO](#Government Use of FIDO)
[Appendix](#appendix)

#Summary


# Introduction
The ever-increasing number of accounts that users have to manage are burdening factors, as users frequently forget their passwords, resulting in losing access to their accounts.


## Passkeys
- Passkeys refer only to WebAuthn/FIDO credentials, and not to the many other keys and protocols, such as PIV, OTP, or OpenPGP Card, available in the YubiKey 5 Series.
Any passwordless FIDO credential is a passkey. 
- Passkeys are a password replacement that provide faster, easier, and more secure sign-ins to websites and apps across a user’s devices. 
- Unlike passwords, passkeys are resistant to phishing, are always strong, and are designed so that there are no shared secrets.
- They simplify account registration for apps and websites, are easy to use, work across all of a user’s devices, and even other devices within physical proximity.
- From a technical standpoint, passkeys are FIDO credentials that are discoverable by browsers or housed within native applications or security keys for passwordless authentication. 
- Passkeys replace passwords with cryptographic key pairs for phishing-resistant sign-in security and an improved user experience. The cryptographic keys are used from end-user devices (computers, phones, or security keys) for user authentication.
- Passkeys that are managed by phone or computer operating systems are automatically synced between the user’s devices via a cloud service. The cloud service also stores an encrypted copy of the FIDO credential. 

- Single-device passkeys : Designed to be available only from a single device from which they cannot be copied. For example, a physical security key could contain multiple single-device passkeys.
- Synced passkeys : Passkeys that are synced between user’s devices via a cloud service.
- Device-bound passkeys : Those that never leave a single device (including those on UAF apps).

### Creating a Passkey
- Passkey creation can happen when a new user registers for an account, or when an authenticated user desires to create one for their existing account. 

- Passkey creation is triggered on the client (e.g. ”Create a passkey” button), initiating a three-step sequence:

1. The client (a web app running in the browser or a native app) requests a random challenge from the server.
2. The client then calls the WebAuthn API with credentials.create(challenge), handing over the challenge, which results in a key pair – a private & a public key – being created on the device (usually a phone or computer, called “Authenticator” in the WebAuthn context). 
- The private key (i.e. the passkey) is used to sign the challenge and stored on the user’s device inside secure hardware (TPM or secure enclave). 
- The matching public key, a credential ID, and the signed challenge are returned by the function. 
- The user may get prompted for verification with a biometric or a PIN during this step.
3. To finalize passkey registration, the client now sends the public key, the credential ID, and the signed challenge back to the server. 
- The server associates the public key and the credential ID with the user for future authentication flows and checks the validity of the operation by verifying the signed challenge with the public key.

### Authenticating with a Passkey
- Unlike a password that has to be sent over to the authenticating server, a passkey does not leave the user’s device to sign in. 

- Instead, the passkey is used locally to create a unique cryptographic signature that proves to the server that it has been created with the passkey. 

The user on the client (”Sign in with a passkey” button) sequence for passkey authentication:

1. The client requests a random challenge from the server.
2. The client calls the WebAuthn API with credentials.get(challenge) .
  - Prompts the user for verification with a biometric or a PIN and using a stored passkey to sign the challenge. 
  - The signed challenge as well as the username and the credential ID of the used passkey are returned by the function.
3. Finalize passkey authentication : Client sends signed challenge, username, and credential ID back to the server. 
 - The server checks if the username and credential ID are known.
   - If known, server uses public key to check the validity of the signed challenge. 
   - If the signed challenge can be successfully verified by the public key, the server can safely assume that the user was in possession of the passkey and create a session or hand out an authorization token.



# FIDO

## FIDO Registration
1. Registration Starts
- User is prompted to choose an available FIDO authenticator that matches the online service’s acceptance policy.
2. User Approval
- User unlocks the FIDO authenticator using a fingerprint reader, a button on a second–factor device, securely–entered PIN or other method.
3. New Key Created
- User’s device creates a new public/private key pair unique for the local device, online service and user’s account.
4. Registration Complete
- Public key is sent to the online service and associated with the user’s account. 
- The private key and any information about the local authentication method (such as biometric measurements or templates) never leave the local device.

## FIDO Sign in
1. Sign in
- Online service challenges user to sign in with a previously registered device that matches the service’s acceptance policy.
2. User Approval
- User unlocks the FIDO authenticator using the same method as at Registration time.
3. Key Selection
- Device uses the user’s account identifier provided by the service to select the correct key and sign the service’s challenge.
4. Sign in Completes
- Client device sends the signed challenge back to the service, which verifies it with the stored public key.
- User is signed in.

## FIDO Authentication Features
FIDO Authentication categorized by user interactions:
- Touch
  - Touch security key for user presence check
- Type
  - Type client PIN or screen-unlocking PIN
- Scan
  - Fingerprint scan
  - Vein scan
  - Iris scan (look into camera)
  - Face scan
- Speak
  - Voice recognition
- Move
  - Insert a security key in a USB port
  - Scan security keys via NFC with smart phones
  - Draw a pattern on screen to unlock smart phones
  - Activate buttons for actions
  - Touch screen for selecting actions
  - Use mouse or alternative input devices for selecting actions
  - QR code scan for pairing a device
- Read
  - Instructions on screen
- Timer
  - Complete authentication within limited time


## Government Use of FIDO
1. GSA - Login. gov

The Challenge
With phishing attacks on the rise, it was imperative for the government to support “phish-proof” multi-factor authentication (MFA) technology that was also user-friendly, efficient and cost-effective.



The Solution
After evaluating several options for authentication for login.gov, the government decided to support FIDO2 through the use of FIDO security keys and built-in FIDO authenticators like Windows Hello biometrics. Through comparison to other options, they found FIDO to check the box for security, usability, cost and compliance. 

FIDO standards provide a secure alternative that is compliant with NIST guidelines for high assurance strong authentication.
- NIST’s Digital Identity Guidelines – Authentication and Lifecycle Management (Special Publication 800-63B) is the guidance that federal agencies must adhere to as it pertains to authenticating users to its networks. 

The 2017 guidance reclassified SMS OTPs as a “restricted” authentication technology. This means that agencies need to offer users at least one alternate authenticator that is not restricted. They also must provide users with meaningful information on the security risks of the restricted authenticator (SMS OTP) and availability of alternatives. 


The Results
September 2018, GSA rolled out authentication with FIDO2. Initial adoption ~2,000, or 0.2%, of new users.

Next, GSA required registration of a second MFA option which resulted in newly registered FIDO2 security keys increasing to 17,000 per month. 

June 2019, ~27,000 FIDO2 keys registered and the adoption rate has increased to about 3% of all new users, representing a significant increase from initial rollout.

### Deployment and UX
GSA rolled out authentication with FIDO2 in September 2018. login.gov supports FIDO2 through the use of FIDO security keys and built-in FIDO authenticators like Windows Hello biometrics. For users, these are all referred to as “security keys” during user onboarding. 

The process for setting up FIDO2 at login.gov:
1. Creating a new login.gov account 
- User enters their email address and creates a password. Login.gov will first send an auto-generated email for the new user to confirm their email address. 
2. Select method of MFA
- Then, they are instructed to select and set up MFA from a menu of options, including SMS OTP, FIDO2 security keys, and backup codes. 
- To set up FIDO2, the user selects the “Security Key” option. 
- The user can create a nickname for their security key. 
3. Set up Security Key
- User is prompted to either insert a hardware security key into their computer and touch it or, if their device has a supported built-in authenticator, be prompted to use it by looking into the camera or touching a biometric sensor (for two examples). 
- The user is presented with a “success screen” and they can then access their login.gov account.
- Selecting “Remember Device” prevents MFA need on that device for 30 days.


Opportunities to Increase Adoption 
1. User Education - Specifically, informing users that they have the option to enroll with FIDO2 and educating them about what FIDO is and how to set it up.
It can be a challenge to accomplish this without confusing the set of users who are not able to set up FIDO, due to not having a FIDO2 security key or a built-in authenticator. 

2. The onboarding process and use of “security key” term for all FIDO authenticators - Preliminary findings indicate that extra clarity around using the device's name instead of the security key language would help adoption to keep the security key option for users who have the physical security key and adding additional options for users with built-in authenticators i.e. “use your Android phone,” or “use your Windows Hello device,” etc.  

3. “MFA Checkup” Feature - Addresses real-world problem when users change their smartphone and lose their backup codes. Login.gov would display a screen informing the user of the methods available or provide the user with the option to replace a method. 
Ultimately, GSA sees these actions to streamline user communications and make user authentication options more clear as key to increasing user adoption and help both GSA and end users realize the full security, usability and cost reduction benefits that FIDO Authentication provides. 
