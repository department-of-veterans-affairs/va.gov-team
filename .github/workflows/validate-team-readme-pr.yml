name: Validate Team README Changes

# Trigger when team README files are modified in pull requests
on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'teams/*/README.md'
      - 'teams/*/*/README.md'

permissions:
  contents: read
  pull-requests: write
  issues: read

jobs:
  validate-team-readmes:
    runs-on: ubuntu-latest  # Use standard runner - sufficient for validation with sparse checkout
    timeout-minutes: 15     # Reduced timeout since validation is lightweight
    
    steps:
      - name: Minimal checkout for team validation
        uses: actions/checkout@v4
        with:
          # Minimal sparse checkout - only what we need for validation
          fetch-depth: 1
          sparse-checkout: |
            scripts/manifest/
            teams/
          sparse-checkout-cone-mode: false
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Verify environment
        run: |
          echo "‚úÖ Minimal repository checkout completed"
          echo "Available disk space:"
          df -h | head -2
          echo "Checked out directories:"
          ls -la
      
      - name: Setup Ruby environment
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'
          bundler-cache: false
      
      - name: Get changed team README files
        id: changed-files
        uses: actions/github-script@v7
        with:
          script: |
            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            
            // Filter for team README files
            const teamReadmeFiles = files.filter(file => 
              file.filename.match(/^teams\/[^\/]+\/[^\/]+\/README\.md$/) ||
              file.filename.match(/^teams\/[^\/]+\/README\.md$/)
            );
            
            console.log('Changed team README files:', teamReadmeFiles.map(f => f.filename));
            
            // Extract team names from file paths
            const teamNames = teamReadmeFiles.map(file => {
              const parts = file.filename.split('/');
              if (parts.length === 4) {
                // Format: teams/portfolio/team-name/README.md
                return parts[2];
              } else if (parts.length === 3) {
                // Format: teams/team-name/README.md
                return parts[1];
              }
              return null;
            }).filter(Boolean);
            
            return {
              files: teamReadmeFiles.map(f => f.filename),
              teamNames: [...new Set(teamNames)] // Remove duplicates
            };
      
      - name: Validate changed team READMEs
        id: validation
        run: |
          CHANGED_DATA='${{ steps.changed-files.outputs.result }}'
          echo "Changed data: $CHANGED_DATA"
          
          # Parse the JSON output from the previous step
          TEAM_NAMES=$(echo "$CHANGED_DATA" | ruby -rjson -e "
            data = JSON.parse(STDIN.read)
            puts data['teamNames'].join(' ')
          ")
          
          echo "Team names to validate: $TEAM_NAMES"
          
          # Create results directory
          mkdir -p validation_results
          
          # Validate each team
          VALIDATION_RESULTS=""
          HAS_ISSUES=false
          
          for team_name in $TEAM_NAMES; do
            echo "Validating team: $team_name"
            
            # Run validation for the specific team
            if ruby scripts/manifest/validate_teams.rb --team="$team_name" --output="validation_results/${team_name}_validation.md" --verbose; then
              echo "‚úÖ Validation completed for $team_name"
              
              # Check if the team has any issues by looking for error indicators in the output
              if grep -q "‚ùå\|‚ö†Ô∏è" "validation_results/${team_name}_validation.md"; then
                HAS_ISSUES=true
                echo "üîç Found validation issues for $team_name"
              else
                echo "‚úÖ No issues found for $team_name"
              fi
              
              # Read the validation result
              TEAM_RESULT=$(cat "validation_results/${team_name}_validation.md")
              VALIDATION_RESULTS="${VALIDATION_RESULTS}\n\n## Validation Results for ${team_name}\n\n${TEAM_RESULT}"
            else
              echo "‚ùå Validation failed for $team_name"
              HAS_ISSUES=true
              VALIDATION_RESULTS="${VALIDATION_RESULTS}\n\n## Validation Results for ${team_name}\n\n‚ùå **Error:** Could not validate team README. Please check the file format and try again."
            fi
          done
          
          # Save consolidated results
          echo -e "$VALIDATION_RESULTS" > validation_results/consolidated_results.md
          
          # Set outputs for next step
          echo "has_issues=$HAS_ISSUES" >> $GITHUB_OUTPUT
          echo "validation_completed=true" >> $GITHUB_OUTPUT
          
          # Show summary
          if [ "$HAS_ISSUES" = "true" ]; then
            echo "üîç Some teams have validation issues that need attention"
          else
            echo "‚úÖ All validated teams have complete documentation"
          fi
      
      - name: Find existing validation comment
        id: find-comment
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('## Team README Validation Results')
            );
            
            return botComment ? botComment.id : null;
      
      - name: Create or update validation comment
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Read the consolidated validation results
            let validationResults = '';
            try {
              validationResults = fs.readFileSync('validation_results/consolidated_results.md', 'utf8');
            } catch (error) {
              validationResults = '‚ùå **Error:** Could not read validation results.';
            }
            
            const hasIssues = '${{ steps.validation.outputs.has_issues }}' === 'true';
            const changedData = JSON.parse('${{ steps.changed-files.outputs.result }}');
            
            // Create comment body
            const commentBody = `## Team README Validation Results
            
            This automated validation ran because team README files were modified in this PR.
            
            **Files Changed:**
            ${changedData.files.map(file => `- \`${file}\``).join('\n')}
            
            **Teams Validated:**
            ${changedData.teamNames.map(team => `- ${team}`).join('\n')}
            
            ${validationResults}
            
            ${hasIssues ? `
            ### üìã Next Steps
            
            Some teams have incomplete documentation. Please review the validation results above and:
            
            1. **Complete missing fields** - Fill in any placeholder text like \`[Full Name]\` or \`[team-slug-name]\`
            2. **Add required sections** - Ensure all required sections are present
            3. **Update product links** - Verify product YAML files exist and are valid
            4. **Review the template** - See [teams/team-readme-template.md](https://github.com/department-of-veterans-affairs/va.gov-team/blob/master/teams/team-readme-template.md) for guidance
            
            üí° **Tip:** This validation is helpful for improving documentation quality, but it won't block your PR from being merged.
            ` : `
            ### ‚úÖ Validation Passed
            
            All validated teams have complete documentation! Great work on maintaining high-quality team information.
            `}
            
            ---
            
            <details>
            <summary>‚ÑπÔ∏è About this validation</summary>
            
            This automated validation:
            - Runs when team README files in \`teams/*/README.md\` are modified
            - Checks for missing required sections and placeholder text
            - Validates linked product YAML files
            - Provides actionable feedback to improve documentation quality
            - **Does not block PR merging** - it's purely informational
            
            For questions about team README requirements, see:
            - [Team README Template](https://github.com/department-of-veterans-affairs/va.gov-team/blob/master/teams/team-readme-template.md)
            - [Team README Instructions](https://github.com/department-of-veterans-affairs/va.gov-team/blob/master/teams/team-readme-instructions.md)
            </details>`;
            
            const existingCommentId = ${{ steps.find-comment.outputs.result }};
            
            if (existingCommentId) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingCommentId,
                body: commentBody
              });
              console.log('Updated existing validation comment');
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
              console.log('Created new validation comment');
            }
      
      - name: Upload validation artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: team-validation-results
          path: validation_results/
          retention-days: 30
