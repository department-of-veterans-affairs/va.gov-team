name: Generate Research Short Story

on:
  push:
    paths:
      - 'products/**/[Ff]indings.md'
      - 'products/**/[Rr]eport.md'
      - 'products/**/[Ii]nsights.md'
      - 'products/**/[Rr]esearch-[Ff]indings.md'
      - 'products/**/[Rr]esearch-[Rr]eport.md'
      - 'products/**/[Rr]esearch-[Ii]nsights.md'
      - 'products/**/[Uu]ser-[Rr]esearch-[Ff]indings.md'
      - 'products/**/[Uu]ser-[Rr]esearch-[Rr]eport.md'
      - 'products/**/[Ss]tudy-[Ff]indings.md'
      - 'products/**/[Ss]tudy-[Rr]eport.md'
    branches:
      - master
      - main
  schedule:
    # Run daily to check for reports that are ready for short story generation
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      research_file_path:
        description: 'Path to specific research file (optional - leave blank to process all eligible files)'
        required: false
        type: string
      ignore_time_delay:
        description: 'Ignore 3-day waiting period (for testing)'
        required: false
        type: boolean
        default: false
      target_branch:
        description: 'Target branch for PR (defaults to current branch)'
        required: false
        type: string
        default: ''

permissions:
  contents: write
  pull-requests: write
  actions: write

jobs:
  check-and-generate-short-story:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.WORKFLOWS_PERMISSIONS }}
          fetch-depth: 0  # Get full history to track file age
          ref: ${{ github.event.inputs.target_branch || github.ref }}

      - name: Find eligible research files
        id: find-files
        run: |
          # Check if manual run with specific file
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.research_file_path }}" ]; then
            RESEARCH_FILE="${{ github.event.inputs.research_file_path }}"
            if [ -f "$RESEARCH_FILE" ]; then
              echo "Manual run for specific file: $RESEARCH_FILE"
              echo "eligible_files=$RESEARCH_FILE" >> $GITHUB_OUTPUT
              echo "skip=false" >> $GITHUB_OUTPUT
            else
              echo "Error: Specified file not found: $RESEARCH_FILE"
              echo "skip=true" >> $GITHUB_OUTPUT
              exit 1
            fi
          else
            # Current time in seconds
            CURRENT_TIME=$(date +%s)
            THREE_DAYS_AGO=$((CURRENT_TIME - 259200))  # 3 days = 259200 seconds
            
            # For manual testing, optionally ignore time delay
            if [ "${{ github.event.inputs.ignore_time_delay }}" = "true" ]; then
              echo "Ignoring 3-day time delay for testing"
              THREE_DAYS_AGO=$CURRENT_TIME
            fi
            
            # Find research files that are at least 3 days old and don't have a short-story.md
            ELIGIBLE_FILES=""
            
            # Find all research files
            RESEARCH_FILES=$(find products -type f -name "*.md" | grep -E '([Ff]indings|[Rr]eport|[Ii]nsights|[Rr]esearch-[Ff]indings|[Rr]esearch-[Rr]eport|[Rr]esearch-[Ii]nsights|[Uu]ser-[Rr]esearch-[Ff]indings|[Uu]ser-[Rr]esearch-[Rr]eport|[Ss]tudy-[Ff]indings|[Ss]tudy-[Rr]eport)\.md$' || true)
            
            for FILE in $RESEARCH_FILES; do
              DIR=$(dirname "$FILE")
              SHORT_STORY_PATH="$DIR/short-story.md"
              
              # Get the file's first commit time
              FIRST_COMMIT_TIME=$(git log --follow --format=%at --reverse "$FILE" | head -1)
              
              if [ -n "$FIRST_COMMIT_TIME" ]; then
                # Check if file is at least 3 days old (or if we're ignoring delay)
                if [ "$FIRST_COMMIT_TIME" -le "$THREE_DAYS_AGO" ]; then
                  # Check if short-story.md exists
                  if [ ! -f "$SHORT_STORY_PATH" ]; then
                    ELIGIBLE_FILES="$ELIGIBLE_FILES$FILE "
                  else
                    # Check if research file was updated after short story
                    RESEARCH_LAST_MODIFIED=$(git log -1 --format=%at "$FILE")
                    SHORT_STORY_LAST_MODIFIED=$(git log -1 --format=%at "$SHORT_STORY_PATH" 2>/dev/null || echo "0")
                    
                    if [ "$RESEARCH_LAST_MODIFIED" -gt "$SHORT_STORY_LAST_MODIFIED" ]; then
                      ELIGIBLE_FILES="$ELIGIBLE_FILES$FILE "
                    fi
                  fi
                fi
              fi
            done
            
            if [ -z "$ELIGIBLE_FILES" ]; then
              echo "No eligible research files found"
              echo "skip=true" >> $GITHUB_OUTPUT
            else
              echo "eligible_files=$ELIGIBLE_FILES" >> $GITHUB_OUTPUT
              echo "skip=false" >> $GITHUB_OUTPUT
              echo "Found eligible files: $ELIGIBLE_FILES"
            fi
          fi

      - name: Process each eligible file
        if: steps.find-files.outputs.skip != 'true'
        run: |
          IFS=' ' read -ra FILES <<< "${{ steps.find-files.outputs.eligible_files }}"
          
          for RESEARCH_FILE in "${FILES[@]}"; do
            if [ -n "$RESEARCH_FILE" ]; then
              echo "Processing: $RESEARCH_FILE"
              
              # Get all unique authors for this file in the last 3 days
              THREE_DAYS_AGO=$(date -d '3 days ago' '+%Y-%m-%d')
              AUTHORS=$(git log --since="$THREE_DAYS_AGO" --format='%an|%ae' "$RESEARCH_FILE" | sort -u)
              
              # Create a comma-separated list of author usernames
              REVIEWER_LIST=""
              while IFS='|' read -r author email; do
                USERNAME=$(echo "$author" | tr '[:upper:]' '[:lower:]' | tr ' ' '-')
                if [ -n "$REVIEWER_LIST" ]; then
                  REVIEWER_LIST="$REVIEWER_LIST,$USERNAME"
                else
                  REVIEWER_LIST="$USERNAME"
                fi
              done <<< "$AUTHORS"
              
              # Save metadata for later steps
              echo "CURRENT_FILE=$RESEARCH_FILE" >> process_metadata.txt
              echo "REVIEWERS=$REVIEWER_LIST" >> process_metadata.txt
              echo "DIR_PATH=$(dirname "$RESEARCH_FILE")" >> process_metadata.txt
            fi
          done

      - name: Generate short stories
        if: steps.find-files.outputs.skip != 'true'
        run: |
          # Process each file's metadata
          while IFS= read -r line; do
            if [[ $line == CURRENT_FILE=* ]]; then
              RESEARCH_FILE="${line#CURRENT_FILE=}"
              read -r REVIEWERS_LINE
              REVIEWERS="${REVIEWERS_LINE#REVIEWERS=}"
              read -r DIR_LINE
              DIR_PATH="${DIR_LINE#DIR_PATH=}"
              
              # Read research content
              RESEARCH_CONTENT=$(cat "$RESEARCH_FILE")
              
              # Read prompt instructions
              PROMPT_FILE="products/copilot-research-prompts/research-short-story-prompt.md"
              if [ -f "$PROMPT_FILE" ]; then
                PROMPT_INSTRUCTIONS=$(awk '/^```plaintext/,/^```/ {if (!/^```(plaintext)?$/) print}' "$PROMPT_FILE")
                
                # Create action metadata file for GitHub Copilot
                echo "RESEARCH_FILE=$RESEARCH_FILE" >> $GITHUB_ENV
                echo "REVIEWERS=$REVIEWERS" >> $GITHUB_ENV
                echo "DIR_PATH=$DIR_PATH" >> $GITHUB_ENV
                echo "PROMPT_INSTRUCTIONS<<EOF" >> $GITHUB_ENV
                echo "$PROMPT_INSTRUCTIONS" >> $GITHUB_ENV
                echo "EOF" >> $GITHUB_ENV
                echo "RESEARCH_CONTENT<<EOF" >> $GITHUB_ENV
                echo "$RESEARCH_CONTENT" >> $GITHUB_ENV
                echo "EOF" >> $GITHUB_ENV
              fi
            fi
          done < process_metadata.txt

      - name: Generate short story with GitHub Copilot
        if: steps.find-files.outputs.skip != 'true'
        id: generate-short-story
        uses: github/copilot-cli-action@v1
        with:
          prompt: |
            ${{ env.PROMPT_INSTRUCTIONS }}
            
            Please summarize this research report:
            
            ${{ env.RESEARCH_CONTENT }}
          temperature: 0.7
          top_p: 1
          max_tokens: 1500

      - name: Save short story and create PR
        if: steps.find-files.outputs.skip != 'true'
        run: |
          # Save the generated short story
          mkdir -p "${{ env.DIR_PATH }}"
          echo "${{ steps.generate-short-story.outputs.response }}" > "${{ env.DIR_PATH }}/short-story.md"
          
          # Save the short story content for Slack
          echo "SHORT_STORY_CONTENT<<EOF" >> $GITHUB_ENV
          echo "${{ steps.generate-short-story.outputs.response }}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
          # Determine if this is an update or new story
          if git ls-files --error-unmatch "${{ env.DIR_PATH }}/short-story.md" 2>/dev/null; then
            PR_TITLE="Update Research Short Story: ${{ env.DIR_PATH }}"
            COMMIT_MSG="Update research short story for ${{ env.RESEARCH_FILE }}"
            PR_TYPE="updated"
          else
            PR_TITLE="Research Short Story: ${{ env.DIR_PATH }}"
            COMMIT_MSG="Generate research short story for ${{ env.RESEARCH_FILE }}"
            PR_TYPE="new"
          fi
          
          # Add test indicator if manual run
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            PR_TITLE="[TEST] $PR_TITLE"
          fi
          
          echo "PR_TITLE=$PR_TITLE" >> $GITHUB_ENV
          echo "COMMIT_MSG=$COMMIT_MSG" >> $GITHUB_ENV
          echo "PR_TYPE=$PR_TYPE" >> $GITHUB_ENV

      - name: Create Pull Request
        if: steps.find-files.outputs.skip != 'true'
        id: create-pull-request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.WORKFLOWS_PERMISSIONS }}
          commit-message: "${{ env.COMMIT_MSG }}"
          title: "${{ env.PR_TITLE }}"
          body: |
            ## 📚 Research Short Story ${{ env.PR_TYPE == 'updated' && 'Updated' || 'Generated' }}
            
            ${{ github.event_name == 'workflow_dispatch' && '> ⚠️ **This is a TEST run** triggered manually via workflow_dispatch' || '' }}
            
            This pull request ${{ env.PR_TYPE == 'updated' && 'updates' || 'adds' }} a research short story based on the findings in `${{ env.RESEARCH_FILE }}`.
            
            ### 📝 Changes
            - ${{ env.PR_TYPE == 'updated' && 'Updated' || 'Added' }} `short-story.md` in `${{ env.DIR_PATH }}/`
            
            ### 👀 Review Instructions
            Please review the generated short story for:
            - Accuracy of key insights
            - Appropriate tone and language
            - Proper markdown formatting
            - Adherence to the 400-word limit
            
            ### 👥 Reviewers
            All authors who contributed to the research findings in the past 3 days have been added as reviewers. Only one approval is needed to merge.
            
            ${{ env.PR_TYPE == 'updated' && '### 🔄 Why was this updated?\nThe research findings were modified after the initial short story was created, so this PR updates the short story to reflect the latest insights.' || '' }}
            
            ${{ github.event_name == 'workflow_dispatch' && '### 🧪 Test Run Details\n- Research file: `' || '' }}${{ github.event_name == 'workflow_dispatch' && env.RESEARCH_FILE || '' }}${{ github.event_name == 'workflow_dispatch' && '`\n- Time delay ignored: ' || '' }}${{ github.event_name == 'workflow_dispatch' && github.event.inputs.ignore_time_delay || '' }}${{ github.event_name == 'workflow_dispatch' && '\n- Target branch: ' || '' }}${{ github.event_name == 'workflow_dispatch' && github.event.inputs.target_branch || github.ref || '' }}
          branch: auto/research-short-story-${{ github.run_number }}
          delete-branch: true
          reviewers: ${{ env.REVIEWERS }}
          labels: |
            research
            documentation
            automated
            ${{ env.PR_TYPE == 'updated' && 'update' || 'new' }}
            ${{ github.event_name == 'workflow_dispatch' && 'test' || '' }}

      - name: Add comment to PR
        if: steps.find-files.outputs.skip != 'true' && steps.create-pull-request.outputs.pull-request-number
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.WORKFLOWS_PERMISSIONS }}
          script: |
            const prNumber = ${{ steps.create-pull-request.outputs.pull-request-number }};
            const reviewers = '${{ env.REVIEWERS }}'.split(',');
            const prType = '${{ env.PR_TYPE }}';
            const isTest = '${{ github.event_name }}' === 'workflow_dispatch';
            
            if (prNumber) {
              const mentions = reviewers.map(r => `@${r}`).join(', ');
              let message = '';
              
              if (isTest) {
                message = `🧪 **TEST RUN** - ${mentions} - This is a test generation of the research short story. Please review to ensure the automation is working correctly before deploying to production.`;
              } else if (prType === 'updated') {
                message = `👋 ${mentions} - The research short story has been updated to reflect recent changes to your findings! Please review the updates and make any necessary edits before merging.`;
              } else {
                message = `👋 ${mentions} - A research short story has been generated based on your research findings! After the 3-day synthesis period, we've created this summary. Please review and make any necessary edits before merging.\n\n**Note:** Only one reviewer needs to approve and merge this PR.`;
              }
              
              github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: message
              });
            }

      - name: Send Slack notification
        if: steps.find-files.outputs.skip != 'true' && steps.create-pull-request.outputs.pull-request-number
        uses: slackapi/slack-github-action@v1.26.0
        with:
          channel-id: 'research-ops'
          payload: |
            {
              "text": "📚 New Research Short Story Generated",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "📚 New Research Short Story Generated",
                    "emoji": true
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "_A research short story has been automatically generated from recent findings._"
                  }
                },
                {
                  "type": "divider"
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "${{ env.SHORT_STORY_CONTENT }}"
                  }
                },
                {
                  "type": "divider"
                },
                {
                  "type": "context",
                  "elements": [
                    {
                      "type": "mrkdwn",
                      "text": "📁 *Research File:* `${{ env.RESEARCH_FILE }}`"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "👥 *Reviewers:* ${{ env.REVIEWERS }}"
                    }
                  ]
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "Review PR on GitHub",
                        "emoji": true
                      },
                      "url": "https://github.com/${{ github.repository }}/pull/${{ steps.create-pull-request.outputs.pull-request-number }}",
                      "style": "primary"
                    },
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View Full Report",
                        "emoji": true
                      },
                      "url": "https://github.com/${{ github.repository }}/blob/${{ github.ref }}/${{ env.RESEARCH_FILE }}"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_USER_OAUTH_ACCESS_TOKEN }}
