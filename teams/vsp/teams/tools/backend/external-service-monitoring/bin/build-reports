#!/usr/bin/env ruby

# frozen_string_literal: true

SCRIPT_VERSION = '0.0.2'
PROFILE_NAME   = ENV['PROFILE_NAME'] || 'dev-edition-default'
EXTENSION_NAME = '/extensions/switchyomega@feliscatus.addons.mozilla.org.xpi'
GRAFANA_BASE_URL = 'http://grafana.vfs.va.gov/d/pEgVdRlZk/external-service-performance-indicators'
LINUX_FIREFOX_PATH = '/opt/firefox/firefox'
OSX_FIREFOX_PATH = '/Applications/Firefox.app/Contents/MacOS/firefox'

require 'bundler/inline'
require 'rbconfig'
gemfile do
  source 'https://rubygems.org'

  ruby RUBY_VERSION || '2.6.6'

  gem 'json'
  gem 'pastel'
  gem 'pry'
  gem 'tty-spinner'
  gem 'watir'
  gem 'webdrivers', '4.0.0'
end

# SLOReporter
class SLOReporter
  attr_accessor :browser, :backend, :board_url
  def initialize(browser, backend)
    @browser  = browser
    @backend  = backend
    @board_url = GRAFANA_BASE_URL + query_params
  end

  def query_params
    "?orgId=1&var-backend=#{backend}"
  end

  def capture_screenshot
    browser.goto board_url

    # Dumb hack for waiting until the last board is loaded
    browser.div(aria_label: /50th Percentile Latency over Time/).wait_until(&:present?)
    sleep 5

    # TODO: Cleanup the file handling
    tmpfile = backend + 'tmp.png'
    browser.screenshot.save tmpfile

    shot_filename = backend + '_slo_screenshot.png'

    # TODO: do the compression afterwords
    system "convert #{tmpfile} -chop 5%x8% -gravity south -chop 0x23.5% #{tmpfile} && \
            pngcrush -reduce -brute #{tmpfile} #{shot_filename} && \
            rm #{tmpfile}"
    shot_filename
  end
end

spinner = TTY::Spinner.new("[:spinner] Rustlin' up a phantom 'fox ...", format: :burger)

#### Configure the driver based on OS
host_os = RbConfig::CONFIG['host_os']
path = case host_os
       when /darwin|mac os/
         OSX_FIREFOX_PATH
       when /linux/
         LINUX_FIREFOX_PATH
       else
         raise Error::WebDriverError, "unknown os: #{host_os.inspect}"
       end

begin
  Selenium::WebDriver::Firefox::Binary.path = path
rescue Selenium::WebDriver::Error::WebDriverError
  puts 'Cannot find binary for Firefox...'
  exit 1
end

options = Selenium::WebDriver::Firefox::Options.new

begin
  # TODO: Create a template/skeleton profile to include here
  default_profile = Selenium::WebDriver::Firefox::Profile.from_name PROFILE_NAME
  if path == OSX_FIREFOX_PATH
    default_profile.add_extension default_profile.instance_variable_get('@model') + EXTENSION_NAME
  end
  options.profile = default_profile
  options.headless!

  # TODO: Add capability for direct proxy in lieu of extension
  # https://github.com/department-of-veterans-affairs/vets.gov-team/blob/master/Practice%20Areas/Engineering/Internal%20Tools.md#test-and-use-the-socks-proxy
  driver = Selenium::WebDriver.for :firefox, options: options

  b = Watir::Browser.new driver
  b.goto GRAFANA_BASE_URL
  b.window.resize_to(1200, 1600)
rescue Errno::ENOENT => e
  puts 'ðŸ¦Š Close all instances of Firefox and try again...'
  exit 1
rescue Selenium::WebDriver::Error::UnknownError => e
  puts 'ðŸ§¦ It\'s likely that you don\'t have SOCKS enabled...'
  exit 1
end

spinner.stop('Ready for capture!')

# TODO: This should use a service catalog or something not hard-coded.
backends = %w[api_vet360_back
              appeals_back
              arcgis_back
              central-mail_back
              emis_back
              eoas_back
              es_back
              evss_back
              gids_back
              govdelivery_back
              hca_ee_back
              health_apis_back
              idme_back
              lighthouse_apis_back
              loan_guaranty_back
              mhv_back
              mvi_back
              okta_back
              pagerduty_back
              ppms_back
              salesforce-gibft_back
              search-gov_back
              tims_back
              va_mobile_back
              vha-access_back]

backends.each do |backend|
  spinner = TTY::Spinner.new("[:spinner] Capturing dashboard screenshot for #{backend}...", format: :pulse_3)
  spinner.auto_spin
  spinner.success('success') unless
    SLOReporter.new(b, backend).capture_screenshot
end
