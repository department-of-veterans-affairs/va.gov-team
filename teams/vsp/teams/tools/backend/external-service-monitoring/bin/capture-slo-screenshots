#!/usr/bin/env ruby

# frozen_string_literal: true

SCRIPT_VERSION     = '0.0.3'
PROFILE_NAME       = ENV['PROFILE_NAME'] || 'dev-edition-default'
GRAFANA_BASE_URL   = 'http://grafana.vfs.va.gov/d/pEgVdRlZk/external-service-performance-indicators'
LINUX_FIREFOX_PATH = '/home/kf/.local/bin/firefox/firefox'
OSX_FIREFOX_PATH   = '/Applications/Firefox.app/Contents/MacOS/firefox'

require 'bundler/inline'
require 'fileutils'
require 'rbconfig'

gemfile do
  source 'https://rubygems.org'

  ruby RUBY_VERSION || '2.6'

  gem 'json'
  gem 'pastel'
  gem 'pry'
  gem 'tty-spinner'
  gem 'watir'
  gem 'webdrivers', '4.4.1'
end

# SLOReporter
class SLOReporter
  attr_accessor :browser, :backend, :board_url, :tmpfile

  def initialize(browser, backend)
    @browser, @backend = browser, backend
    @board_url = GRAFANA_BASE_URL + query_params
    @tmpfile   = 'tmp/screenshots/' + backend + 'tmp.png'
  end

  def query_params
    "?orgId=1&var-backend=#{backend}"
  end

  def capture_screenshot
    return if File.exist? @tmpfile
    browser.goto board_url

    # Dumb hack for waiting until the last board is loaded
    browser.div(aria_label: /50th Percentile Latency over Time/).wait_until(&:present?)
    sleep 5

    browser.screenshot.save tmpfile
  end

  def compress_screenshot
    shot_filename = 'tmp/screenshots/' + backend + '_slo_screenshot.png'
    # convert chop format goes:
    system "convert #{tmpfile} -chop 5%x8% -gravity south #{tmpfile} && \
            pngcrush -reduce -brute #{tmpfile} #{shot_filename} && \
            rm #{tmpfile}"
    shot_filename
  end
end

spinner = TTY::Spinner.new("[:spinner] Rustlin' up a phantom 'fox ...", format: :burger)

#### Configure the driver based on OS
host_os = RbConfig::CONFIG['host_os']
path = case host_os
       when /darwin|mac os/
         OSX_FIREFOX_PATH
       when /linux/
         LINUX_FIREFOX_PATH
       else
         raise Error::WebDriverError, "unknown os: #{host_os.inspect}"
       end

begin
  Selenium::WebDriver::Firefox::Binary.path = path
rescue Selenium::WebDriver::Error::WebDriverError
  puts 'Cannot find binary for Firefox...'
  exit 1
end

options = Selenium::WebDriver::Firefox::Options.new

begin
  # TODO: Create a template/skeleton profile to include here
  # TODO: This ONLY works if you open `about:profiles` in a different profile window. Not sure why.
  default_profile = Selenium::WebDriver::Firefox::Profile.from_name PROFILE_NAME

  default_profile['network.proxy.type'] = 1
  default_profile['network.proxy.socks'] = '127.0.0.1'
  default_profile['network.proxy.socks_port'] = 2001
  default_profile['network.proxy.socks_remote_dns'] = true
  default_profile['network.proxy.no_proxies_on'] = 'www.googletagmanager.com, www.google-analytics.com'

  options.profile = default_profile
  # options.headless!

  driver  = Selenium::WebDriver.for :firefox, options: options
  browser = Watir::Browser.new driver
rescue Errno::ENOENT => e
  puts e
  puts PROFILE_NAME
  puts 'ðŸ¦Š Close all instances of Firefox and try again...'
  puts 'It may be necessary to go to \'about:profiles\''
  exit 1
rescue Selenium::WebDriver::Error::UnknownError => e
  puts e
  puts 'ðŸ§¦ Check SOCKS is enabled and try again...'
  exit 1
end

spinner.success('Ready for capture!')

begin
  browser.goto GRAFANA_BASE_URL

  # Quick copy/paste job from above SLOReporter class to capture the overview boards
  browser.div(aria_label: /50th Percentile Latency over Time/).wait_until(&:present?)

  FileUtils.mkdir_p('tmp/screenshots') unless File.exists?('tmp/screenshots')
  overview = 'tmp/screenshots/all-overviewtmp.png'
  shot_filename = 'tmp/screenshots/all-overview.png'
  browser.screenshot.save overview

  system "convert #{overview} -chop 5%x8% -gravity south #{overview} && \
          pngcrush -reduce -brute #{overview} #{shot_filename}"
end

# # TODO: This should use a service catalog or something not hard-coded.
backends = %w[api_vet360_back
              appeals_back
              arcgis_back
              bgs_back
              central-mail_back
              emis_back
              eoas_back
              es_back
              evss_back
              gids_back
              govdelivery_back
              hca_ee_back
              health_apis_back
              idme_back
              lighthouse_apis_back
              loan_guaranty_back
              mdt_back
              mhv_back
              mvi_back
              okta_back
              pagerduty_back
              ppms_back
              salesforce-gibft_back
              search-gov_back
              va_mobile_back
              vbms_back
              vha-access_back]

backends.each do |backend|
  spinner = TTY::Spinner.new("[:spinner] Capturing dashboard screenshot for #{backend}...", format: :pulse_3)
  reporter = SLOReporter.new(browser, backend)
  reporter.capture_screenshot
  spinner.success('success')
end

backends.each do |backend|
  spinner = TTY::Spinner.new("[:spinner] Compressing screenshot file for #{backend}...", format: :pulse_3)
  reporter = SLOReporter.new(browser, backend)
  reporter.compress_screenshot
  spinner.success('success')
end
