# Architecture Intent meeting template

## Instructions

Your document should be brief and high-level. Please keep it to a single page. Focus on the high level and link to supporting material where appropriate; this is _not_ a detailed engineering spec.

Some of the items below may not apply to your work--that's okay. You may not be able to fill in some items that _do_ apply to your work--that's also okay. If you don't have answers, please come ready to ask questions.

## Overview

### Consuming the Accreditation API

#### Number of Records in Latest Trexler File

- **Attorneys:** 5292
- **Claims Agents:** 599
- **Representatives:** 18102 (many are duplicate representatives with unique POA)
- **Organizations:** 95

#### Number of Records in Staging

- **`veteran_representatives`:** 14191
- **`veteran_organizations`:** 110

### Seed the New Tables

Seed the new `accredited_individuals`, `accredited_organizations`, and `accreditations` tables with records from the legacy `veteran_representatives` and `veteran_organizations` tables so we don’t have to hit the Address Validation API for all of the records again.

**Steps:**

1. **Create a Rake Task**  
   Create a rake task to copy records from the legacy representatives and organizations tables into the new ones:

   - Add organizations.
   - Add representatives and create records in the `accreditations` join table.

2. **Use Batch Processing**  
   Use Rails’ `find_in_batches` and `insert_all` Active Record commands to process the records in chunks of 1000. For example:

   ```ruby
   OldModel.find_in_batches(batch_size: 1000) do |batch|
     transformed_records = batch.map do |record|
       {
         new_field1: record.field1,
         new_field2: record.field2,
         # … other transformations as needed
         created_at: Time.current,
         updated_at: Time.current
       }
     end

     # Insert the transformed batch into the new table in one query
     NewModel.insert_all(transformed_records)
   end
   ```

We’ll run this rake task once.

**This approach ensures that:**

- **Memory Usage** is kept low since only 1,000 records are processed at a time.
- **Performance** is maintained by executing fewer, more efficient SQL queries (one per batch).
- **Simplicity** is retained since it’s an in-place operation without the overhead of background job systems like Sidekiq.

### Create Daily Sidekiq Job to Consume the Accreditation API

Create a daily job to hit the Accreditation API to update the `accredited_individuals`, `accredited_organizations`, and `accreditations` tables.

**Modifications and Logic Adjustments:**

- **Active Flag/Soft Delete:**  
  Add an `is_active` column (defaulting to `true`) to the `accredited_individuals` and `accredited_organizations` tables. If the Accreditation API doesn’t include an individual or organization, update the corresponding record's `is_active` column to `false` for soft delete.

- **Import Logic Changes:**  
  Keep much of the logic from the Trexler File import except:

  - Create new records that don’t exist.
  - Mark records that exist in our tables but are missing from the Accreditation API response as `is_active = false` to “soft delete” them.
  - Diff a record’s `raw_address` in our tables with the corresponding Accreditation API record to determine if the address needs to be updated.
  - Diff the `phone` value instead of the `phone_number` value (since we no longer use `phone_number`).
  - Diff the individual’s names (since names may change due to events like marriage).
  - Continue to diff the email.

- **Other Considerations:**
  - Determine what to do with `can_accept_reject_poa`.
  - Keep the existing Sidekiq job/implementation to update records.

This setup should help maintain data integrity while ensuring the Accreditation API updates are applied consistently across our systems.

## Checklist

- Product description
  - [x] For the past 1.5 years, we've relied on a weekly .XLSX file to be shared with us from OGC with updated representative and organization data that we sanitize and push to the `va.gov-teams-sensitive repo`. A Sidekiq job runs daily to check if the file has been updated in the last 24 hours; if it has been, we grab the file, interate through the records in specific sheets, diff the data, and update records in the `veteran_representatives` and `veteran_organizations` if they need to be updated. We're replacing this XLSX file with the new Accrediation API that GCLAWS built for us.
  - [ ] Link to Collaboration Cycle Request issue
- UX design description
  - [x] NA ~For user-facing changes, link to UX prototype or wireframes if available~
  - [ ] Call out any engineering challenges; UX is reviewed in the [Design Intent meeting][DI]
- Frontend changes
  - [x] NA ~Identify any significant code changes~
  - [x] NA ~Identify any new design system components needed or changes to current components~
  - [x] NA ~Describe any product analytics being gathered~
- Backend changes
  - [x] Does the project introduce any new or unusual infrastructure dependencies? No.
  - [x] Do you need to poll any APIs for status? No.
  - [x] NA ~Are you handling all failure and error cases while in custody of your users's data?~
- Internal API changes
  - [x] NA ~List new or modified APIs in `vets-api`~
  - [x] Are you deprecating or removing any APIs? No.
  - [x] NA ~Do you have API documentation?~
  - [x] NA ~Describe expected call patterns~
- External API changes
  - [x] List new or modified APIs for upstream or external systems. OGC's Accediation API
  - [x] Describe expected call patterns
    - Base URL: `https://ogccotst1.dva.va.gov:4501`
    - [x] `GET` paginated results from `/api/v2/accreditations/Agents`
    - [x] `GET` paginated results from `/api/v2/accreditations/Attorneys`
    - [x] `GET` paginated results from `/api/v2/accreditations/Representatives`
    - [x] `GET` paginated results from `/api/v2/accreditations/VeteranServiceOrganizations`
  - [x] What PII or PHI will be transmitted to/from the external systems? Representative and Organization data is transmitted from the Accrediation API but all of the information is public and is the content that is served in our Find a Representative search results.
- Background jobs
  - [x] List any required background processing
    - [x] The `Veteran::Organizations::QueueUpdates` and `Veteran::Representatives::QueueUpdates` Sidekiq jobs will be a replaced by new Sidekiq job that iterates through the 4 new Accrediation API endpoints, diffs each record against its corresponding record in our tables, and batches chunks of records to the existing `Veteran::Organizations::Update` and `Veteran::Representatives::Update` Sidekiq jobs (which will need to be modified).
  - [x] NA ~Describe error and dead letter handling~
- Data storage
  - [x] Describe new or modified databases, tables or columns
    - [x] New table: `accredited_individuals`
    - [x] New table: `accredited_organizations`
    - [x] New table: `accreditations`
  - [x] Describe indexes and constraints
    - [x] Indexes and constraints for `accredited_individuals`
      - `t.index ["full_name"], name: "index_accredited_individuals_on_full_name"`
      - `t.index ["location"], name: "index_accredited_individuals_on_location", using: :gist`
      - `t.index ["poa_code"], name: "index_accredited_individuals_on_poa_code"`
      - `t.index ["registration_number", "individual_type"], name: "index_on_reg_num_and_type_for_accredited_individuals", unique: true`
    - [x] Indexes and constraints for `accredited_organizations`
      - `t.index ["location"], name: "index_accredited_organizations_on_location", using: :gist`
      - `t.index ["name"], name: "index_accredited_organizations_on_name"`
      - `t.index ["poa_code"], name: "index_accredited_organizations_on_poa_code", unique: true`
    - [x] Indexes and constraints for `accreditations`
      - `t.index ["accredited_individual_id", "accredited_organization_id"], name: "index_accreditations_on_indi_and_org_ids", unique: true`
      - `t.index ["accredited_organization_id"], name: "index_accreditations_on_accredited_organization_id"`
  - [x] Identify PII and PHI and where and how it will be stored, processed, expired and deleted
    - The following PII is publically available and is served up in our Find A Representative search engine.
    - If the data expires it will be soft-deleted by changing a record's `is_active` value from `true` to `false`
    - None of the data will be deleted.
      - [x] PII and PHI in `accredited_individuals`
        - "first_name"
        - "middle_initial"
        - "last_name"
        - "full_name"
        - "email"
        - "phone"
        - "address_type"
        - "address_line1"
        - "address_line2"
        - "address_line3"
        - "city"
        - "country_code_iso3"
        - "country_name"
        - "county_name"
        - "county_code"
        - "international_postal_code"
        - "province"
        - "state_code"
        - "zip_code"
        - "zip_suffix"
        - "raw_address"
        - "lat"
        - "long"
        - "location"
      - [x] PII and PHI in `accredited_organizations`
        - "name"
        - "phone"
        - "address_type"
        - "address_line1"
        - "address_line2"
        - "address_line3"
        - "city"
        - "country_code_iso3"
        - "country_name"
        - "county_name"
        - "county_code"
        - "international_postal_code"
        - "province"
        - "state_code"
        - "zip_code"
        - "zip_suffix"
        - "raw_address"
        - "lat"
        - "long"
        - "location"
      - [x] PII and PHI in `accreditations`
        - NA
- Libraries and dependencies
  - [x] List new or updated dependencies. None.
- Metrics, logging, observability, alerting
  - [x] We'll continue to get alerts in the OCTO [#benefits-representation-management-notifications](https://dsva.slack.com/archives/C06QG3C318D) channel which provides a summary of organization updates as well as error notifications for representative and organization updates.
- Infrastructure and network changes
  - [x] We submitted a New BPE Connection request to ESECC so we can hit the new Accreditation API from vets-api staging and production environments. Our requests were approved and the network changes were performed many months ago.
- Test strategy
  - [x] We'll update the RSPEC unit tests that currently cover the XLSX/`veteran_representatives` and `veteran_organizations` table updates
  - [x] We'll do manual testing locally and in staging before running the new Sidekiq job in production
  - [x] NA ~Describe required test data and test user accounts~
- Rollout plan
  - [ ] List scope of any feature flags
  - [ ] Identify other teams to coordinate with
  - [ ] Describe rollback plan
- Internal administration tasks
  - [ ] What maintenance or administration tasks do you anticipate will need to be performed periodically?
  - [ ] Describe how you intend for these tasks to be performed (e.g., through an internal web page, through terminal access, etc.).
- Security
  - [ ] What questions do you have regarding items on the [security checklist](https://github.com/department-of-veterans-affairs/va.gov-team/blob/master/platform/engineering/collab-cycle/architecture-intent-meeting.md#security-checklist)?
  - [ ] Are there any other security concerns about your project that you want to discuss?
  - [ ] What [threat modeling](https://cheatsheetseries.owasp.org/cheatsheets/Threat_Modeling_Cheat_Sheet.html) have you done, and how did the results influence your planned architecture?

## Where to put this checklist and what to name it

This document should be in markdown and should be dropped into the following location when complete:

va.gov-team-sensitive/tree/master/platform/engineering/collaboration-cycle/architecture-intent/checklist/

Name the file in the following format:
[team]-[application]-[date]

Team and application should match your Collab Cycle kick-off ticket (so we know who you are). Date should be supplied in the format MMDDYYYY.

Once you've dropped this checklist into this folder, please update your Collab Cycle ticket with the location as well as a link to your user data flow document.
